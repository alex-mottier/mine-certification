openapi: 3.0.0
info:
  title: mine-certification
  version: 1.0.0
paths:
  /api/v1/login:
    post:
      tags:
        - Authentication
      description: Login
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileLoginRequest'
      responses:
        '201':
          description: 'User created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResource'
  /api/v1/chapters:
    get:
      tags:
        - Chapter
      description: 'List chapters'
      operationId: 'List chapters'
      responses:
        '200':
          description: 'List chapters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterCollection'
  /api/v1/criterias:
    get:
      tags:
        - Criteria
      description: 'List criterias'
      operationId: 'List criterias'
      responses:
        '200':
          description: 'List criterias'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaCollection'
  /api/v1/mines:
    get:
      tags:
        - Mines
      description: 'List mines with filters available'
      operationId: 'List mines with filters available'
      parameters:
        -
          name: name
          in: query
          description: 'Name of mine'
          required: false
        -
          name: status
          in: query
          description: 'Status of mine'
          required: false
          example: validated
        -
          name: trashed
          in: query
          description: 'Retrieve also the deleted mines'
          required: false
          example: 'true'
        -
          name: lon
          in: query
          description: 'Longitude of a position'
          required: false
          example: '41.40338'
        -
          name: lat
          in: query
          description: 'Latitude of a position'
          required: false
          example: '2.17403'
        -
          name: radius
          in: query
          description: 'Radius around the position of the given longitude and latitude (in km)'
          required: false
          example: '50'
      responses:
        '200':
          description: 'List of mine'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MineCollection'
    post:
      tags:
        - Mines
      description: 'Create a new mine'
      operationId: 'Create a new mine'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreMineRequest'
      responses:
        '201':
          description: 'Mine created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MineResource'
  '/api/v1/mines/:mine_id':
    get:
      tags:
        - Mines
      description: 'List mine with details'
      operationId: 'List mine with details'
      parameters:
        -
          name: ':mine_id'
          in: path
          description: 'ID of mine'
          required: true
      responses:
        '200':
          description: 'List of mine'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MineDetailResource'
    patch:
      tags:
        - Mines
      description: 'Validate / Refuse a mine'
      operationId: 'Validate / Refuse a mine'
      parameters:
        -
          name: ':mine_id'
          in: path
          description: 'ID of mine'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateMineRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MineResource'
      security:
        -
          apiToken: []
  '/api/v1/mines/:mine_id/users':
    post:
      tags:
        - Mines
      description: 'Assign a mine to a certifier'
      operationId: 'Assign a mine to a certifier'
      parameters:
        -
          name: ':mine_id'
          in: path
          description: 'ID of mine'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignMineRequest'
      responses:
        '201':
          description: 'Mine assigned'
      security:
        -
          apiToken: []
  '/api/v1/mines/:mine_id/users/:user_id':
    delete:
      tags:
        - Mines
      description: 'Revoke a mine to a certifier'
      operationId: 'Revoke a mine to a certifier'
      parameters:
        -
          name: ':mine_id'
          in: path
          description: 'ID of mine'
          required: true
        -
          name: ':user_id'
          in: path
          description: 'ID of certifier'
          required: true
      responses:
        '204':
          description: 'Mine revoked'
      security:
        -
          apiToken: []
  /api/v1/reactions:
    get:
      tags:
        - Reaction
      description: 'List reactions'
      operationId: 'List reactions'
      responses:
        '200':
          description: 'List reactions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionCollection'
      security:
        -
          apiToken: []
    post:
      tags:
        - Reaction
      description: 'Create a reaction'
      operationId: 'Create a reaction'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreReactionRequest'
      responses:
        '200':
          description: 'Create a reaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionResource'
      security:
        -
          apiToken: []
  /api/v1/reports:
    get:
      tags:
        - Report
      description: 'List reports'
      operationId: 'List reports'
      responses:
        '200':
          description: 'List reports'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportCollection'
      security:
        -
          apiToken: []
    post:
      tags:
        - Report
      description: 'Create report'
      operationId: 'Create report'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreReportRequest'
      responses:
        '200':
          description: 'Report details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResource'
      security:
        -
          apiToken: []
  '/api/v1/reports/:report_id':
    post:
      tags:
        - Report
      description: 'Edit report'
      operationId: 'Edit report'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReportRequest'
      responses:
        '200':
          description: 'Report details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResource'
      security:
        -
          apiToken: []
    patch:
      tags:
        - Report
      description: 'Validate / Refuse report'
      operationId: 'Validate / Refuse report'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeReportRequest'
      responses:
        '200':
          description: 'Report details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResource'
      security:
        -
          apiToken: []
  /api/v1/users:
    get:
      tags:
        - Users
      description: 'List users with filters available'
      operationId: 'List users with filters available'
      parameters:
        -
          name: type
          in: query
          description: 'Type of user'
          required: false
          example: certifier
        -
          name: status
          in: query
          description: 'Status of user'
          required: false
          example: validated
        -
          name: trashed
          in: query
          description: 'Retrieve also the deleted users'
          required: false
          example: 'true'
        -
          name: lon
          in: query
          description: 'Longitude of a position'
          required: false
          example: '41.40338'
        -
          name: lat
          in: query
          description: 'Latitude of a position'
          required: false
          example: '2.17403'
        -
          name: radius
          in: query
          description: 'Radius around the position of the given longitude and latitude (in km)'
          required: false
          example: '50'
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
      security:
        -
          apiToken: []
    post:
      tags:
        - Users
      description: 'Create a new user'
      operationId: 'Create a new user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUserRequest'
      responses:
        '201':
          description: 'User created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
  '/api/v1/users/:user_id':
    put:
      tags:
        - Users
      description: 'Edit a user'
      operationId: 'Edit a user'
      parameters:
        -
          name: ':user_id'
          in: path
          description: "User's ID"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 'User edited'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
      security:
        -
          apiToken: []
    delete:
      tags:
        - Users
      description: 'Delete a user'
      operationId: 'Delete a user'
      parameters:
        -
          name: ':user_id'
          in: path
          description: "User's ID"
          required: true
      responses:
        '204':
          description: 'User deleted'
      security:
        -
          apiToken: []
    patch:
      tags:
        - Users
      description: 'Validate / Refuse a user'
      operationId: 'Validate / Refuse a user'
      parameters:
        -
          name: ':user_id'
          in: path
          description: "User's ID"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateUserRequest'
      responses:
        '200':
          description: 'User validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
      security:
        -
          apiToken: []
components:
  schemas:
    MobileLoginRequest:
      title: StoreUserRequest
      properties:
        username:
          description: "User's username"
          required:
            - 'true'
          type: string
        password:
          description: "User's password"
          type: string
        device_name:
          description: "User's device name"
          required:
            - 'true'
          type: string
      type: object
    AssignMineRequest:
      title: AssignMineRequest
      properties:
        certifiers:
          description: 'Ids of certifiers to assign'
          type: array
          items:
            type: integer
      type: object
    StoreMineRequest:
      title: StoreMineRequest
      properties:
        name:
          description: "Mine's name"
          type: string
        email:
          description: "Mine's email"
          type: string
        phone_number:
          description: "Mine's phone number"
          type: string
        tax_number:
          description: "Mine's tax number"
          type: string
        longitude:
          description: "Mine's longitude"
          type: number
          format: double
        latitude:
          description: "Mine's longitude"
          type: number
          format: double
      type: object
    ValidateMineRequest:
      title: ValidateMineRequest
      properties:
        status:
          description: "Mine's status"
          type: string
          enum:
            - validated
            - refused
      type: object
    StoreReactionRequest:
      title: StoreReactionRequest
      properties:
        comment:
          description: Comment
          type: string
        criteria_report_id:
          description: "Criteria Report's id"
          type: string
        status:
          description: "Reaction's status"
          type: string
        attachments:
          description: "Mine's tax number"
          type: array
          items:
            type: string
      type: object
    StoreReportRequest:
      title: StoreReportRequest
      properties:
        name:
          description: "Report's name"
          type: string
        mine_id:
          description: 'Linked mine'
          type: string
        type:
          description: "Report's type"
          type: string
          enum:
            - report
            - evaluation
        criterias:
          description: 'Report based on criterias'
          type: array
          items:
            properties:
              criteria_id:
                type: integer
              comment:
                type: string
              score:
                type: number
                format: float
              attachments:
                type: array
                items:
                  type: string
              criterias:
                type: ''
            type: object
      type: object
    UpdateReportRequest:
      title: UpdateReportRequest
      properties:
        name:
          description: "Report's name"
          type: string
        status:
          description: "Report's type"
          type: string
          enum:
            - for_validation
        criterias:
          description: 'Report based on criterias'
          type: array
          items:
            properties:
              criteria_id:
                type: integer
              comment:
                type: string
              score:
                type: number
                format: float
              attachments:
                type: array
                items:
                  type: string
              criterias:
                type: ''
            type: object
      type: object
    UpgradeReportRequest:
      title: UpgradeReportRequest
      properties:
        status:
          description: "Report's status"
          type: string
          enum:
            - validated
            - refused
      type: object
    StoreUserRequest:
      title: StoreUserRequest
      properties:
        username:
          description: "User's username"
          required:
            - 'true'
          type: string
        fullname:
          description: "User's full name"
          type: string
        email:
          description: "User's email"
          required:
            - 'true'
          type: string
        password:
          description: "User's password"
          required:
            - 'true'
          type: string
        type:
          description: "User's type"
          required:
            - 'true'
          type: string
          enum:
            - administrator
            - certifier
            - institution
        institutions:
          description: "User's institutions"
          type: array
          items:
            description: "Insitutions's ID"
            type: integer
      type: object
    UpdateUserRequest:
      title: UpdateUserRequest
      properties:
        username:
          description: "User's username"
          type: string
        fullname:
          description: "User's full name"
          type: string
        email:
          description: "User's email"
          type: string
        password:
          description: "User's password"
          type: string
        type:
          description: "User's type"
          type: string
          enum:
            - administrator
            - certifier
            - institution
        institutions:
          description: "User's institutions"
          type: array
          items:
            description: "Insitutions's ID"
            type: integer
      type: object
    ValidateUserRequest:
      title: ValidateUserRequest
      properties:
        status:
          description: 'In wich status will be the user after the operation'
          type: string
          enum:
            - validated
            - refused
      type: object
    LoginResource:
      title: LoginResource
      properties:
        type:
          type: string
          example: Bearer
        token:
          type: string
      type: object
    ChapterCollection:
      title: ChapterCollection
      type: array
      items:
        $ref: '#/components/schemas/ChapterResource'
    ChapterResource:
      title: ChapterResource
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        quota:
          type: number
          format: float
        criterias:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaResource'
      type: object
    CriteriaCollection:
      title: CriteriaCollection
      type: array
      items:
        $ref: '#/components/schemas/CriteriaResource'
    CriteriaResource:
      title: CriteriaResource
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        quota:
          type: number
          format: float
        chapter_id:
          type: integer
      type: object
    MineCollection:
      title: MineCollection
      type: array
      items:
        $ref: '#/components/schemas/MineResource'
    MineDetailResource:
      title: MineDetailResource
      properties:
        mine:
          $ref: '#/components/schemas/MineResource'
        certifiers:
          type: array
          items:
            $ref: '#/components/schemas/UserResource'
      type: object
    MineResource:
      title: MineResource
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone_number:
          type: string
        longitude:
          type: string
        latitude:
          type: string
        status:
          type: string
          enum:
            - created
            - validated
            - refused
      type: object
    ReactionCollection:
      title: ReactionCollection
      type: array
      items:
        $ref: '#/components/schemas/ReactionResource'
    ReactionResource:
      title: ReactionResource
      properties:
        id:
          type: integer
        comment:
          type: string
        criteria_report_id:
          type: integer
        status:
          type: string
          enum:
            - created
            - validated
            - refused
      type: object
    ReportCollection:
      title: ReportCollection
      type: array
      items:
        $ref: '#/components/schemas/ReportResource'
    ReportResource:
      title: ReportResource
      properties:
        id:
          type: integer
        name:
          type: string
        score:
          type: number
          format: float
        type:
          type: string
          enum:
            - report
            - evaluation
        status:
          type: string
          enum:
            - created
            - for_validation
            - validated
            - refused
        mine_id:
          type: integer
        criterias:
          description: 'Report based on criterias'
          type: array
          items:
            properties:
              criteria_id:
                type: integer
              comment:
                type: string
              score:
                type: number
                format: float
              attachments:
                type: array
                items:
                  type: string
              criterias:
                type: ''
            type: object
      type: object
    UserCollection:
      title: UserCollection
      type: array
      items:
        $ref: '#/components/schemas/UserResource'
    UserResource:
      title: UserResource
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        type:
          type: string
          enum:
            - administrator
            - certifier
            - institution
        status:
          type: string
          enum:
            - created
            - validated
            - refused
      type: object
  securitySchemes:
    apiToken:
      type: apiKey
      name: Authentication
      in: header
      bearerFormat: Bearer
tags:
  -
    name: Authentication
    description: 'Endpoint to handle "Authentication" requests'
  -
    name: Chapter
    description: 'Endpoint to handle "Chapter" requests'
  -
    name: Criteria
    description: 'Endpoint to handle "Criteria" requests'
  -
    name: Mines
    description: 'Endpoint to handle "Mines" request'
  -
    name: Reaction
    description: 'Endpoint to handle "Reaction" requests'
  -
    name: Report
    description: 'Endpoint to handle "Report" requests'
  -
    name: Users
    description: 'Endpoint to handle "Users" request'
